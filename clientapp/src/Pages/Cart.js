import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './Cart.css';

const API_BASE = 'https://localhost:7182/api';

function Cart({ setCartItemsCount }) {
  const [state, setState] = useState({
    items: [],
    isLoading: true,
    error: null,
    isProcessing: false
  });

  const navigate = useNavigate();

  const fetchCartItems = async () => {
    try {
      setState(prev => ({ ...prev, isLoading: true, error: null }));

      // 1. –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const itemsRes = await fetch(`${API_BASE}/cart/items`, {
        credentials: 'include'
      });

      if (itemsRes.status === 401) {
        localStorage.removeItem('userData');
        navigate('/login');
        return;
      }

      if (!itemsRes.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: ${itemsRes.status}`);
      }

      const variantIds = await itemsRes.json();
      
      if (!variantIds?.length) {
        setState({ items: [], isLoading: false, error: null });
        setCartItemsCount(0);
        return;
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
      const queryParams = variantIds.map(id => `variantIds=${id}`).join('&');
      const infoRes = await fetch(`${API_BASE}/cart/info?${queryParams}`, {
        credentials: 'include'
      });

      if (!infoRes.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${infoRes.status}`);
      }

      const itemsData = await infoRes.json();
      setState({ items: itemsData, isLoading: false, error: null });
      setCartItemsCount(itemsData.length);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      setState({
        items: [],
        isLoading: false,
        error: error.message
      });
      setCartItemsCount(0);
    }
  };

  const handleCheckout = async () => {
    try {
      setState(prev => ({ ...prev, isProcessing: true }));
      
      const orderData = {
        items: state.items.map(item => ({
          productId: item.productId,
          variantId: item.variantId,
          quantity: item.quantity || 1,
          price: item.price
        })),
        shippingAddress: "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
        billingAddress: "–ê–¥—Ä–µ—Å –æ–ø–ª–∞—Ç—ã",
        paymentMethod: "–ö–∞—Ä—Ç–∞",
        notes: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
      };

      const res = await fetch(`${API_BASE}/Order`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData),
        credentials: 'include'
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }

      const order = await res.json();
      
      // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
      await fetch(`${API_BASE}/cart/clear`, {
        method: 'POST',
        credentials: 'include'
      });

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      navigate('/my-orders', { 
        state: { 
          newOrderId: order.orderId,
          message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:', error);
      setState(prev => ({ ...prev, error: error.message }));
    } finally {
      setState(prev => ({ ...prev, isProcessing: false }));
    }
  };

  const removeItem = async (variantId) => {
    try {
      setState(prev => ({ ...prev, isLoading: true }));
      
      const res = await fetch(`${API_BASE}/cart/remove`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ variantId }),
        credentials: 'include'
      });

      if (!res.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä');
      }

      await fetchCartItems();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      setState(prev => ({ ...prev, error: error.message }));
    }
  };

  useEffect(() => {
    fetchCartItems();
  }, []);

  const formatPrice = (price) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(price);
  };

  const calculateTotal = () => {
    return state.items.reduce((total, item) => 
      total + (item.price * (item.quantity || 1)), 0);
  };

  if (state.isLoading) {
    return (
      <div className="cart-loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...</p>
      </div>
    );
  }

  if (state.error) {
    return (
      <div className="cart-error">
        <h3>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h3>
        <p>{state.error}</p>
        <button 
          className="retry-btn"
          onClick={fetchCartItems}
        >
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        </button>
      </div>
    );
  }

  if (state.items.length === 0) {
    return (
      <div className="cart-empty">
        <div className="empty-icon">üõí</div>
        <h3>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
        <button 
          className="catalog-btn"
          onClick={() => navigate('/catalog')}
        >
          –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
        </button>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <div className="cart-header">
        <h1>–ö–æ—Ä–∑–∏–Ω–∞</h1>
        <span className="items-count">{state.items.length} —Ç–æ–≤–∞—Ä–æ–≤</span>
      </div>
      
      <div className="cart-content">
        <div className="cart-items-list">
          {state.items.map(item => (
            <div key={`${item.productId}-${item.variantId}`} className="cart-item">
              <div className="cart-item-image">
                <img
                  src={'–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
                  alt={item.productName}
                  onError={(e) => {
                  }}
                />
              </div>
              
              <div className="cart-item-details">
                <h3 className="cart-item-title">{item.productName}</h3>
                {item.variantName && (
                  <p className="cart-item-variant">–í–∞—Ä–∏–∞–Ω—Ç: {item.variantName}</p>
                )}
                <p className="cart-item-price">{formatPrice(item.price)}</p>
                <div className="cart-item-quantity">
                  <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity || 1}</span>
                </div>
              </div>
              
              <button
                className="cart-remove-btn"
                onClick={() => removeItem(item.variantId)}
                disabled={state.isProcessing}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          ))}
        </div>

        <div className="cart-summary">
          <h2>–ò—Ç–æ–≥–æ</h2>
          <div className="summary-row">
            <span>–¢–æ–≤–∞—Ä—ã ({state.items.length})</span>
            <span>{formatPrice(calculateTotal())}</span>
          </div>
          <div className="summary-row">
            <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
            <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
          </div>
          <div className="summary-total">
            <span>–û–±—â–∞—è —Å—É–º–º–∞</span>
            <span>{formatPrice(calculateTotal())}</span>
          </div>
          <button
            className="checkout-btn"
            onClick={handleCheckout}
            disabled={state.isProcessing}
          >
            {state.isProcessing ? (
              <>
                <span className="spinner"></span>
                –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...
              </>
            ) : (
              '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
            )}
          </button>
        </div>
      </div>
    </div>
  );
}

export default Cart;